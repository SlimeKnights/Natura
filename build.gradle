/*
 * Natura
 * Master build file
 *
 * Based on TConstruct's master build file
 *
 * Authors: Sunstrike, ProgWML6
 * Help from AbrarSyed
 */

buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    maven {
        name 'ForgeFS'
        url 'https://files.minecraftforge.net/maven'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // compatlayer
        name 'K-4u maven'
        url "https://maven.k-4u.nl/"
    }
    maven {
        name "Tehnut Maven FS"
        url "https://tehnut.info/maven"
    }
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
}

group = 'com.progwml6.natura'

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch (all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${minecraft_version}-${artifact_version}"

minecraft {
    mappings channel: 'snapshot', version: mappings_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE,PULSAR'
            // property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP,CORE,PULSAR' enable if you want spam from the scanner.

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                natura {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE,PULSAR'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                natura {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP,CORE,PULSAR'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'natura', '--all', '--output', file('generated/resources/')

            mods {
                natura {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    deployerJars
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + forge_version

    compile fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    compile fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinkers_construct_version}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compile fg.deobf("mcp.mobius.waila:Hwyla:${hwyla_version}_${minecraft_version}")
    compile fg.deobf("mcjty.theoneprobe:TheOneProbe-1.15:${probe_version}")
    //deobfCompile "cofh:RedstoneFlux:${config.redstoneflux_version}:universal"
}

processResources {
    inputs.property "version", artifact_version
    inputs.property "MCversion", minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': artifact_version, 'MCversion': minecraft_version, 'forge_version': forge_version_toml
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Natura",
                "Specification-Vendor"    : "ProgWML6, alexbegt",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "ProgWML6, alexbegt",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}
